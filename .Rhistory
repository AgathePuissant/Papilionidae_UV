MD$view="D"
MV = create_distpheno(meanphen_MV,"M","V", level=lvl)
MV$sex="M"
MV$view="V"
FD = create_distpheno(meanphen_FD,"F","D", level=lvl)
FD$sex="F"
FD$view="D"
FV = create_distpheno(meanphen_FV,"F","V", level=lvl)
FV$sex="F"
FV$view="V"
M = rbind(MD,MV)
Fem = rbind(FD,FV)
MF_visible=rbind(M,Fem)
MF_visible$type = "visible"
#------------------- GLM -------------------------------------------------------
#Data preparation
MF_visible = MF_visible[!is.na(MF_visible$Var1),]
MF_grayscale = MF_grayscale[!is.na(MF_grayscale$Var1),]
MF_visible = MF_visible[match(paste(MF_grayscale$Var1,MF_grayscale$Var2,MF_grayscale$sex,MF_grayscale$view),paste(MF_visible$Var1,MF_visible$Var2,MF_visible$sex,MF_visible$view)),]
MF_grayscale$visdist = MF_visible[match(paste(MF_grayscale$Var1,MF_grayscale$Var2,MF_grayscale$sex,MF_grayscale$view),paste(MF_visible$Var1,MF_visible$Var2,MF_visible$sex,MF_visible$view)),]$value
MF_grayscale = MF_grayscale[MF_grayscale$Var1!=MF_grayscale$Var2,]
#GLM
model<-glm(value~(visdist+overlap+distphylo):sex:view, data=MF_grayscale)
summary(model)
#-------------------------------------------------------------------------------
#------------------ Prepare libraries and functions ----------------------------
library(diverge)
library(reshape2)
library(ggpubr)
library(ape)
library(ggpubr)
library(phytools)
library(RColorBrewer)
library(geomorph)
library(caper)
library(dplyr)
source("./code/basis_functions/match_tree.R")
source("./code/basis_functions/get_phenotype.R")
#------------------ Get the specimens data (UV) -------------------------------------
pc = "./data/pca_embeddings_UV.csv"
lvl = "sp"
if (lvl == "form"){
adp=T
}else{
adp = F
}
list_get_phenotype = get_phenotype(c("F"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_FD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("F"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_FV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FV <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_MD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_MV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MV <- list_match[[2]]
meanphen_grayscale = rbind(meanphen_FD,meanphen_FV,meanphen_MD,meanphen_MV)
data_grayscale = rbind(data_FD,data_FV,data_MD,data_MV)
meanphen_FD_grayscale = meanphen_FD
meanphen_FV_grayscale = meanphen_FV
meanphen_MD_grayscale = meanphen_MD
meanphen_MV_grayscale = meanphen_MV
#------------------ Compute pairwise distance in UV ----------------------------
oritree = read.tree("./data/Papilionidae_MCC_clean.tre")
sis=extract_sisters(subtree)
MD = create_distpheno(meanphen_MD,"M","D", level=lvl)
MD$sex="M"
MD$view="D"
MV = create_distpheno(meanphen_MV,"M","V", level=lvl)
MV$sex="M"
MV$view="V"
FD = create_distpheno(meanphen_FD,"F","D", level=lvl)
FD$sex="F"
FD$view="D"
FV = create_distpheno(meanphen_FV,"F","V", level=lvl)
FV$sex="F"
FV$view="V"
M = rbind(MD,MV)
Fem = rbind(FD,FV)
MF_grayscale=rbind(M,Fem)
MF_grayscale$type = "grayscale"
#------------------ Get the specimens data (visible) -------------------------------------
pc="./data/pca_embeddings_visible.csv"
list_get_phenotype = get_phenotype(c("F"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_FD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("F"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_FV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FV <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_MD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_MV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MV <- list_match[[2]]
meanphen = rbind(meanphen_FD,meanphen_FV,meanphen_MD,meanphen_MV)
data = rbind(data_FD,data_FV,data_MD,data_MV)
meanphen_FD = meanphen_FD[rownames(meanphen_FD_grayscale),]
meanphen_FV = meanphen_FV[rownames(meanphen_FV_grayscale),]
meanphen_MD = meanphen_MD[rownames(meanphen_MD_grayscale),]
meanphen_MV = meanphen_MV[rownames(meanphen_MV_grayscale),]
#------------------ Compute pairwise distance in visible -----------------------
MD = create_distpheno(meanphen_MD,"M","D", level=lvl)
MD$sex="M"
MD$view="D"
MV = create_distpheno(meanphen_MV,"M","V", level=lvl)
MV$sex="M"
MV$view="V"
FD = create_distpheno(meanphen_FD,"F","D", level=lvl)
FD$sex="F"
FD$view="D"
FV = create_distpheno(meanphen_FV,"F","V", level=lvl)
FV$sex="F"
FV$view="V"
M = rbind(MD,MV)
Fem = rbind(FD,FV)
MF_visible=rbind(M,Fem)
MF_visible$type = "visible"
#------------------- GLM -------------------------------------------------------
#Data preparation
MF_visible = MF_visible[!is.na(MF_visible$Var1),]
MF_grayscale = MF_grayscale[!is.na(MF_grayscale$Var1),]
MF_visible = MF_visible[match(paste(MF_grayscale$Var1,MF_grayscale$Var2,MF_grayscale$sex,MF_grayscale$view),paste(MF_visible$Var1,MF_visible$Var2,MF_visible$sex,MF_visible$view)),]
MF_grayscale$visdist = MF_visible[match(paste(MF_grayscale$Var1,MF_grayscale$Var2,MF_grayscale$sex,MF_grayscale$view),paste(MF_visible$Var1,MF_visible$Var2,MF_visible$sex,MF_visible$view)),]$value
MF_grayscale = MF_grayscale[MF_grayscale$Var1!=MF_grayscale$Var2,]
#GLM
model<-glm(value~(visdist+overlap+distphylo):sex:view, data=MF_grayscale)
summary(model)
#-------------------------------------------------------------------------------
#------------------ Prepare libraries and functions ----------------------------
library(diverge)
library(reshape2)
library(ggpubr)
library(ape)
library(ggpubr)
library(phytools)
library(RColorBrewer)
source("./code/basis_functions/match_tree.R")
source("./code/basis_functions/get_phenotype.R")
#------------------ Get the specimens data (UV) -------------------------------------
pc = "./data/pca_embeddings_UV.csv"
lvl = "sp"
if (lvl == "form"){
adp=T
}else{
adp = F
}
list_get_phenotype = get_phenotype(c("F"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_FD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("F"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_FV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FV <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_MD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=T)
meanphen <- list_get_phenotype[[1]]
data_MV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MV <- list_match[[2]]
meanphen_grayscale = rbind(meanphen_FD,meanphen_FV,meanphen_MD,meanphen_MV)
data_grayscale = rbind(data_FD,data_FV,data_MD,data_MV)
meanphen_FD_grayscale = meanphen_FD
meanphen_FV_grayscale = meanphen_FV
meanphen_MD_grayscale = meanphen_MD
meanphen_MV_grayscale = meanphen_MV
#------------- Merge the data with mean brightness info ------------------------
meanb <- read.csv("./data/meanb.csv", sep=";")
data_grayscale <- merge(data_grayscale,meanb, by = c("id","view"))
#------------- Prepare data for pairwise comparisons ---------------------------
my_comparisons <- expand.grid(unique(paste0(data_grayscale$sex,data_grayscale$view)),unique(paste0(data_grayscale$sex,data_grayscale$view)))
my_comparisons <- my_comparisons[as.numeric(my_comparisons[,1])>as.numeric(my_comparisons[,2]),]
my_comparisons <- split(as.matrix(my_comparisons), 1:nrow(my_comparisons))
my_comparisons <- lapply(my_comparisons,function(x) {return(as.vector(x))})
my_comparisons <- my_comparisons[c(1:2,5:6)]
data_grayscale$group = paste0(data_grayscale$sex,data_grayscale$view)
stat.test <- compare_means(
meanb ~ group , data = data_grayscale,
method = "t.test"
)
stat.test <- stat.test[!((stat.test$group1=="MD" & stat.test$group2=="FV") | (stat.test$group1=="FV" & stat.test$group2=="MD")),]
stat.test <- stat.test[!((stat.test$group1=="MV" & stat.test$group2=="FD") | (stat.test$group1=="FD" & stat.test$group2=="MV")),]
#------------- Compare Male Dorsal and Male Ventral  ---------------------------
x1= data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="M",,drop=F]$meanb
names(x1) <- data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="M",,drop=F]$tipsgenre
x2= data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="M",,drop=F]$meanb
names(x2) <- data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="M",,drop=F]$tipsgenre
matching = match.phylo.data(subtree,x1)
subtree_analysis = matching$phy
x1 = matching$data
x2 = x2[names(x1)]
phyl.pairedttest(subtree_analysis, x1,x2)
pval = phyl.pairedttest(subtree_analysis, x1,x2)$P.dbar*4
d <- data.frame(tipsgenre = c(names(x1),names(x2)), meanb = c(x1,x2), view = c(rep("x1",length(x1)),rep("x2",length(x2))))
ggplot(d, aes(view, meanb)) +
geom_violin() +
geom_point() +
geom_line(aes(group = tipsgenre)) +
theme_classic()+
annotate("text",1,0.4, label=as.character(round(pval,3)))
stat.test[(stat.test$group1=="MD" & stat.test$group2=="MV") | (stat.test$group1=="MV" & stat.test$group2=="MD"),]$p.adj=pval
#------------- Compare Female Dorsal and Female Ventral  -----------------------
x1= data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="F",,drop=F]$meanb
names(x1) <- data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="F",,drop=F]$tipsgenre
x2= data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="F",,drop=F]$meanb
names(x2) <- data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="F",,drop=F]$tipsgenre
matching = match.phylo.data(subtree,x2)
subtree_analysis = matching$phy
x2 = matching$data
x1 = x1[names(x2)]
phyl.pairedttest(subtree_analysis, x1,x2)
pval = phyl.pairedttest(subtree_analysis, x1,x2)$P.dbar*4
d <- data.frame(tipsgenre = c(names(x1),names(x2)), meanb = c(x1,x2), view = c(rep("x1",length(x1)),rep("x2",length(x2))))
ggplot(d, aes(view, meanb)) +
geom_violin() +
geom_point() +
geom_line(aes(group = tipsgenre)) +
theme_classic()+
annotate("text",1,0.4, label=as.character(round(pval,3)))
stat.test[(stat.test$group1=="FD" & stat.test$group2=="FV") | (stat.test$group1=="FV" & stat.test$group2=="FD"),]$p.adj=pval
#------------- Compare Female Dorsal and Male Dorsal  --------------------------
x1= data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="F",,drop=F]$meanb
names(x1) <- data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="F",,drop=F]$tipsgenre
x2= data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="M",,drop=F]$meanb
names(x2) <- data_grayscale[data_grayscale$view=="D" & data_grayscale$sex=="M",,drop=F]$tipsgenre
matching = match.phylo.data(subtree,x2)
subtree_analysis = matching$phy
x2 = matching$data
x1 = x1[names(x2)]
x1=x1[!is.na(x1)]
x2 = x2[names(x1)]
matching = match.phylo.data(subtree,x2)
subtree_analysis = matching$phy
phyl.pairedttest(subtree_analysis, x1,x2)
pval = phyl.pairedttest(subtree_analysis, x1,x2)$P.dbar*4
d <- data.frame(tipsgenre = c(names(x1),names(x2)), meanb = c(x1,x2), view = c(rep("x1",length(x1)),rep("x2",length(x2))))
ggplot(d, aes(view, meanb)) +
geom_violin() +
geom_point() +
geom_line(aes(group = tipsgenre)) +
theme_classic()+
annotate("text",1,0.4, label=as.character(round(pval,3)))
stat.test[(stat.test$group1=="MD" & stat.test$group2=="FD") | (stat.test$group1=="FD" & stat.test$group2=="MD"),]$p.adj=pval
#------------- Compare Female Ventral and Male Ventral  ------------------------
x1= data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="F",,drop=F]$meanb
names(x1) <- data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="F",,drop=F]$tipsgenre
x2= data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="M",,drop=F]$meanb
names(x2) <- data_grayscale[data_grayscale$view=="V" & data_grayscale$sex=="M",,drop=F]$tipsgenre
matching = match.phylo.data(subtree,x2)
subtree_analysis = matching$phy
x2 = matching$data
x1 = x1[names(x2)]
x1=x1[!is.na(x1)]
x2 = x2[names(x1)]
matching = match.phylo.data(subtree,x2)
subtree_analysis = matching$phy
phyl.pairedttest(subtree_analysis, x1,x2)
pval = phyl.pairedttest(subtree_analysis, x1,x2)$P.dbar*4
d <- data.frame(tipsgenre = c(names(x1),names(x2)), meanb = c(x1,x2), view = c(rep("x1",length(x1)),rep("x2",length(x2))))
ggplot(d, aes(view, meanb)) +
geom_violin() +
geom_point() +
geom_line(aes(group = tipsgenre)) +
theme_classic()+
annotate("text",1,0.4, label=as.character(round(pval,3)))
stat.test[(stat.test$group1=="FV" & stat.test$group2=="MV") | (stat.test$group1=="MV" & stat.test$group2=="FV"),]$p.adj=pval
#------------- Create summary plot of all comparisons  ---------
stat.test <- stat.test %>%
mutate(y.position = c(0.6,0.5,0.5,0.7))
stat.test$p.signif <- apply(stat.test,1,function(x){
if (x[5] < 0.001){
return("***")
}else if (x[5] < 0.01){
return("**")
}else if (x[5] < 0.05){
return("*")
}else if (x[5] < 0.1){
return(".")
}else{
return("n.s.")
}
})
data_grayscale$group <- factor(data_grayscale$group, levels = c("FD", "MD", "FV","MV"))
library(RColorBrewer)
color_paired = brewer.pal(n=4,"Paired")
color_paired=color_paired[c(1,3,2,4)]
ggplot(data=data_grayscale, aes(x=group,y=meanb))+
geom_violin(aes(fill = group))+
# geom_line(aes(group = tipsgenre)) +
stat_summary(fun.data=mean_sdl, geom="pointrange", alpha =0.3)+
stat_pvalue_manual(stat.test, label="p.signif")+
theme_classic()+
xlab("Sex and wing side")+
ylab("Mean UV brightness of wings")+
scale_fill_manual(values=color_paired)+
theme(legend.position = "none")
#------------------ Prepare libraries and functions ----------------------------
library(diverge)
library(reshape2)
library(ggpubr)
library(ape)
library(ggpubr)
library(phytools)
library(RColorBrewer)
library(geomorph)
library(caper)
source("./code/basis_functions/match_tree.R")
source("./code/basis_functions/get_phenotype.R")
#------------------ Get the specimens data (UV) -------------------------------------
pc = "./data/pca_embeddings_UV.csv"
lvl = "sp"
if (lvl == "form"){
adp=T
}else{
adp = F
}
list_get_phenotype = get_phenotype(c("F"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_FD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("F"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_FV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FV <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_MD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_UV.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_MV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MV <- list_match[[2]]
meanphen_grayscale = rbind(meanphen_FD,meanphen_FV,meanphen_MD,meanphen_MV)
data_grayscale = rbind(data_FD,data_FV,data_MD,data_MV)
meanphen_FD_grayscale = meanphen_FD
meanphen_FV_grayscale = meanphen_FV
meanphen_MD_grayscale = meanphen_MD
meanphen_MV_grayscale = meanphen_MV
subtree_analysis = subtree #Save the tree to use in comparisons
#------------------ Get the specimens data (visible) -------------------------------------
pc="./data/pca_embeddings_visible.csv"
list_get_phenotype = get_phenotype(c("F"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_FD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("F"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_FV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_FV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_FV <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("D"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_MD <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MD, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MD <- list_match[[2]]
list_get_phenotype = get_phenotype(c("M"),c("V"), mode = 'mean', level = lvl, path_data_photos = "./data/data_photos_visible.csv",path_coords = pc, reduce_dataset=F)
meanphen <- list_get_phenotype[[1]]
data_MV <- list_get_phenotype[[2]]
sp_data <- list_get_phenotype[[4]]
rm(list=c("list_get_phenotype"))
list_match <- match_tree(meanphen_match = meanphen, data_match = data_MV, add_poly=adp, tree_path = "./data/Papilionidae_MCC_clean.tre")
subtree <- list_match[[1]]
meanphen_MV <- list_match[[2]]
meanphen = rbind(meanphen_FD,meanphen_FV,meanphen_MD,meanphen_MV)
data = rbind(data_FD,data_FV,data_MD,data_MV)
meanphen_FD = meanphen_FD[rownames(meanphen_FD_grayscale),]
meanphen_FV = meanphen_FV[rownames(meanphen_FV_grayscale),]
meanphen_MD = meanphen_MD[rownames(meanphen_MD_grayscale),]
meanphen_MV = meanphen_MV[rownames(meanphen_MV_grayscale),]
#------------------ Compare rates of evolution ---------------------------------
sex="M" #Change this parameter to test for males or females
if (sex=="M"){
meanphen_D_vis = meanphen_MD
meanphen_V_vis = meanphen_MV
meanphen_D_grayscale = meanphen_MD_grayscale
meanphen_V_grayscale = meanphen_MV_grayscale
meanphen_D_grayscale = meanphen_D_grayscale[rownames(meanphen_V_grayscale),,drop=F]
meanphen_V_grayscale = meanphen_V_grayscale[rownames(meanphen_D_grayscale),,drop=F]
meanphen_D_grayscale = meanphen_D_grayscale[complete.cases(meanphen_D_grayscale),,drop=F]
meanphen_V_grayscale = meanphen_V_grayscale[complete.cases(meanphen_V_grayscale),,drop=F]
meanphen_D_vis = meanphen_D_vis[rownames(meanphen_V_vis),,drop=F]
meanphen_V_vis = meanphen_V_vis[rownames(meanphen_D_vis),,drop=F]
meanphen_D_vis = meanphen_D_vis[complete.cases(meanphen_D_vis),,drop=F]
meanphen_V_vis = meanphen_V_vis[complete.cases(meanphen_V_vis),,drop=F]
}else
{
meanphen_D_vis = meanphen_FD
meanphen_V_vis = meanphen_FV
meanphen_D_grayscale = meanphen_FD_grayscale
meanphen_V_grayscale = meanphen_FV_grayscale
meanphen_D_grayscale = meanphen_D_grayscale[rownames(meanphen_V_grayscale),,drop=F]
meanphen_V_grayscale = meanphen_V_grayscale[rownames(meanphen_D_grayscale),,drop=F]
meanphen_D_grayscale = meanphen_D_grayscale[complete.cases(meanphen_D_grayscale),,drop=F]
meanphen_V_grayscale = meanphen_V_grayscale[complete.cases(meanphen_V_grayscale),,drop=F]
meanphen_D_vis = meanphen_D_vis[rownames(meanphen_V_vis),,drop=F]
meanphen_V_vis = meanphen_V_vis[rownames(meanphen_D_vis),,drop=F]
meanphen_D_vis = meanphen_D_vis[complete.cases(meanphen_D_vis),,drop=F]
meanphen_V_vis = meanphen_V_vis[complete.cases(meanphen_V_vis),,drop=F]
}
subtree_analysis_1 = match.phylo.data(subtree,meanphen_D_grayscale)$phy
#Rate ratio UV
res.comp_grayscale = compare.multi.evol.rates(as.matrix(cbind(meanphen_D_grayscale,meanphen_V_grayscale)),subtree_analysis_1,gp=c(rep("D",length(meanphen_D_grayscale)),rep("V",length(meanphen_V_grayscale))))
res.comp_grayscale
subtree_analysis_2 = match.phylo.data(subtree,meanphen_D_vis)$phy
#Rate ratio visible
res.comp_vis = compare.multi.evol.rates(as.matrix(cbind(meanphen_D_vis,meanphen_V_vis)),subtree_analysis_2,gp=c(rep("D",length(meanphen_D_vis)),rep("V",length(meanphen_V_vis))))
res.comp_vis
#------------------ PGLS dorso-ventral -----------------------------------------
#Compute dorso-ventral distance
DV_visible = as.data.frame(diag(as.matrix(dist(meanphen_D_vis, meanphen_V_vis))))
colnames(DV_visible)<-"DV_vis"
DV_grayscale = as.data.frame(diag(as.matrix(dist(meanphen_D_grayscale, meanphen_V_grayscale))))
colnames(DV_grayscale)<-"DV_grayscale"
rownames(DV_grayscale) <- rownames(meanphen_D_grayscale)
#Create dataframe for PGLS
df_cap = data.frame(rownames(DV_visible),DV_visible$DV_vis,DV_grayscale$DV_grayscale)
colnames(df_cap) <- c("Species","DV_visible","DV_grayscale")
#Perform and plot PGLS
comp.data<-comparative.data(subtree_analysis, df_cap, names.col="Species", vcv.dim=2, warn.dropped=TRUE)
model<-pgls(DV_grayscale~DV_visible, data=comp.data, lambda="ML")
summary(model)
ggplot(df_cap, aes(x=DV_visible,y=DV_grayscale))+
geom_point()+
geom_abline(aes(intercept = coef(model)[1], slope = coef(model)[2]), linetype="dashed")+
theme_classic()
